<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on p5.js でゲーム制作</title>
    <link>https://fal-works.github.io/make-games-with-p5js/</link>
    <description>Recent content in Home on p5.js でゲーム制作</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    
	<atom:link href="https://fal-works.github.io/make-games-with-p5js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>パーティクルを追加</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/60-arrange/10-particles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/60-arrange/10-particles/</guid>
      <description>パーティクルを追加 小さな粒や破片を大量に散らかすことで、様々な効果が得られる。 これは「パーティクル」（直訳：粒子）と呼ばれる パーティクルを新</description>
    </item>
    
    <item>
      <title>最初に少し考えてみる</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/10-design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/10-design/</guid>
      <description>最初に少し考えてみる ここでは、実際のコーディングに入る前に、少しだけ抽象的なことを考えてみます。 具体的なソースコードがないとイメージしにくい</description>
    </item>
    
    <item>
      <title>進め方</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/introduction/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/introduction/overview/</guid>
      <description>進め方 全体の流れ メインパートは、この画面の左側に見えている Flappy Bird ライクなゲーム です。 各トピックを順番に見ていき、要所要所でコードの実行結果を確</description>
    </item>
    
    <item>
      <title>プレイヤーだけ実装</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/20-player/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/20-player/</guid>
      <description>プレイヤーだけ実装してみる ソースコード全体の構成を決めておく ここからいろいろソースコードを増やしていくので、 整理のため、ソースコード全体を以</description>
    </item>
    
    <item>
      <title>準備</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/introduction/prepare/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/introduction/prepare/</guid>
      <description>準備 開発・実行環境を準備します。 公式のエディタ p5.js Web Editor で、コードを書いて即実行できます。 ユーザーアカウントを登録すれば、スケッチの保存・共有も</description>
    </item>
    
    <item>
      <title>画面効果を追加</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/60-arrange/20-effects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/60-arrange/20-effects/</guid>
      <description>画面効果を追加 手軽な画面効果として、次のものがある スクリーンシェイク 画面を揺らす。揺れは徐々に収まる スクリーンフラッシュ 画面を明るくする。明</description>
    </item>
    
    <item>
      <title>p5.js スケッチの基本構造</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/introduction/basic-sketch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/introduction/basic-sketch/</guid>
      <description>p5.js スケッチの基本構造 空っぽのスケッチ p5.js Web Editor （あるいはその他、お使いの環境）の操作確認も兼ねて、 以下のコードを実行してみてください。 1 2 3 4 5</description>
    </item>
    
    <item>
      <title>ブロック1個だけ実装</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/30-block/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/30-block/</guid>
      <description>ブロックを1個だけ実装してみる 【再掲】エンティティ関連の処理 全エンティティ共通 位置の更新 プレイヤー用 作成 重力の適用 ジャンプ 描画 ブロック用 作成</description>
    </item>
    
    <item>
      <title>ルール変更</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/60-arrange/30-rules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/60-arrange/30-rules/</guid>
      <description>ルール変更 今回作ってきたプログラムは、少し手を加えるだけで色々なゲームに化けることができます。 どんな改造ができるでしょうか？ 思いつくままに改</description>
    </item>
    
    <item>
      <title>リンク（後学のために）</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/60-arrange/40-links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/60-arrange/40-links/</guid>
      <description>リンク（後学のために） 演出 Juice it or lose it - YouTube 単調なブロック崩しゲームでも演出次第でこう化けるのだというプレゼン。 14:14 あたりから before/after の比較を見せている</description>
    </item>
    
    <item>
      <title>ブロックを複数にする</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/50-blocks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/50-blocks/</guid>
      <description>ブロックを複数にする この先の内容を取り入れる前に、前項 見た目をアレンジ で改造した結果のソースコードを別名保存しておくと良いでしょう。 このペー</description>
    </item>
    
    <item>
      <title>ゲームオーバーを実装</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/60-game-state/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/60-game-state/</guid>
      <description>ゲームオーバーを実装 ゲームオーバーになる条件は プレイヤーが画面下端まで落ちる プレイヤーがブロックに衝突する だったが、このうち 1. は 2. より簡単そ</description>
    </item>
    
    <item>
      <title>衝突判定を実装</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/70-collision/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/70-collision/</guid>
      <description>衝突判定を実装 判定方法 説明用スケッチ 四角形 A と四角形 B が衝突しているかどうかを確認する方法： A, B の x 軸方向での距離が十分に開いていたら、衝突</description>
    </item>
    
    <item>
      <title>著作権情報</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/90-license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/90-license/</guid>
      <description>著作権情報 Copyright (c) 2020 FAL この資料は MIT ライセンスで提供されているので、条項を守れば自由に利用可能です。 参考： MIT License - Wikipedia たとえば、この資料に書いてあるコ</description>
    </item>
    
    <item>
      <title>p5.js の色指定</title>
      <link>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/40-visuals/colors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fal-works.github.io/make-games-with-p5js/docs/50-flappy-bird-like/40-visuals/colors/</guid>
      <description>p5.js の色指定 RGB指定 数値で指定する場合、デフォルトでは 赤、緑、青 を指定する RGB モードとなっている function setup() { createCanvas(800, 600); noStroke(); background(255); // 引数が1つだとグレースケール。</description>
    </item>
    
  </channel>
</rss>